1) Устанавливаем GIT: https://git-scm.com/download/win;
2) (Консоль) В консоле можно проверить версию GIT: git --version;
3) (Консоль) Необходимо проинстализировать репозиторий: git init;
4) Создали какой-то (любой) файл. Необходимо сообщить гиту, что мы создали файл и его необходимо зафиксировать;
Гит построен на неких этапах фиксации;
git status - показывает "что сейчас происходить" с git;
git add - добавляет файлы, за которыми git будет "следить". Например git add index.html;
git rm --cached - убирает "слежку" с файлов. например git rm --cached index.html;
git add . - добавляет все файлы;
5) При изменении файлов гит сам ничего не сохранит, для сохранения изменения в файлах, необходимо прописать git add;
6) Commit - некий фикс нашей версии, для того чтобы в дальнейшем можно было с этим работать;
git commit -m "first commit". В " " - любое придуманное значение, -m (-message);
Выдало ошибку:
    git config --global user.email "you@example.com"
    git config --global user.name "Your Name"
        Написал следующее:
            git config --global user.email "ivan.olimas@gmail.com"
            git config --global user.name "Olimas"
После ввода git commit -m "first commit" выдало:
[master (root-commit) e83f250] first commit
 2 files changed, 19 insertions(+)
 create mode 100644 index.html
 create mode 100644 script.js
Где: e83f250 - хеш (уникальный код этого коммита) - это позволит потом вернуться к коммитам, чем чаще коммитим, тем больше возможностей вернуться в определенный этап разработки;
7) Если мы не хотим, чтобы какие-то файлы попадали в систему контроля версий, то для этого есть специальный файл, который мы можем положить в корень проекта (создаем файл .gitignore), в нем перечисляем файлы, которые хотим "заигнорить";
.gitignore - тоже необходимо "затрекать" - тоесть добавить в "слежку" git, с помощью git add;
В .gitignore можно "игнорировать" папки, пишем в файле /имяпапки. Например: /logs;
8) git commit -m "added gitignore";
9) Необходимо создать новую ветку, чтобы работать с ней и не мешать другому разработчику.
git branch - показывает ветки,
	git branch test - создали ветку с именем test,
git branch -D - удаляет ветку,
	git branch -D test - удалили ветку с именем test,
git branch readme - создали ветку с именем readme.
10) Чтобы переключиться на другую ветку, прописываем: git checkout;
	git checkout readme,
	git checkout master - вернулись на главную ветку.
11) Чтобы создать ветку и сразу на нее переключиться, пишем: git checkout -b new;
Параметр -b означает что мы переключаемся сразу на эту ветку.
Далее проделали некоторые действия:
	git branch -D new
	Создали файл readme.md
	git add .
	git commit -m "created file readme.md"
	cls - команда, которая "очищает" консоль
12) Совмещаем ветки git merge
git merge readme
Далее проделали некоторые действия:
	git branch -D readme
13) Git - локальный, все изменения происходят локально;
14) GitHub, GitLab, Bitbucket - это все как бы хостинги для локального Git;
15) GitBash - это интерпретатор командной строки, иными словами - консоль, как cmd, PowerShell и встроенная консоль в VS Code, которая понимает команды Git;
16) Работаем в GitHub:
You repositories > New repository > Создали репозиторий (прописав все нужное) > Далее возвращаемся к нашему локальному Git и вводим наши credentials (наши данные, для того чтобы Git смог связаться с нашим аккаунтом в GitHub). Это делаеться с помощью команды git config --global;
	a) git config --global user.name
		Olimas
git config --global user.name " " - в кавычках можно поменять имя, которое будет отображаться в Git;
	b) git config --global user.email
git config --global user.email " " - также для емейла;
		ivan.olimas@gmail.com
17) Есть несколько способов подключить Git к GitHub. Все команды написаны на GitHub (You repositories > New repository)
На гитхабе советуют переименовать главную ветку на git branch -M main, переименовал.
Параметр -M - переименовывает.
Далее подключаем Git к GitHub:
git remote add origin https://github.com/Olimas/git-course.git
Далее "заливаем" наш Git на GitHub:
git push -u origin main
18) Готово - репозиторий Git связан с GitHub;
19) Есть расширение для Chrome (OCTOTREE) - позволяет добавить дерево файлов в репозиторий гитхаб.
20) Продолжаем дальше работать.
git add script.js,
git commit -m "added console.log",
git push - "заливаем" на гитхаб.
21) На GitHub, с помощью Code - можно получить доступ к выбранному репозиторию.
git clone - позволит скопировать по ссылке на репозиторий GitHub, выбранный репозиторий себе на компьютер.
Например:
git clone https://github.com/Olimas/git-course.git
И если что-то изменить в этой папке и "запушить", то в репозитории на GitHub сервере тоже все поменяеться.
Но локально в Git наши файлы не будут изменены.
Команда git pull - позволяет забрать все последние изменения с сервера GitHub на локальный компьютер Git.